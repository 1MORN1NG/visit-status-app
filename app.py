import streamlit as st
import pandas as pd
import io
import zipfile
import re
import itertools

st.title("üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ (Visit + Leave + Sell In)")

# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
mode = st.radio("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", [
    "‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Visit",
    "‡∏£‡∏ß‡∏° Visit + ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô",
    "‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå Sell In Total (Excel)"
])

# ‡πÇ‡∏´‡∏°‡∏î: ‡∏£‡∏ß‡∏° Visit ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô
if mode in ["‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Visit", "‡∏£‡∏ß‡∏° Visit + ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô"]:
    visit_files = st.file_uploader("1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Visit (.csv) ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå", type=["csv"], accept_multiple_files=True)

    if mode == "‡∏£‡∏ß‡∏° Visit + ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô":
        master_file = st.file_uploader("2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Master (.xlsx)", type=["xlsx"])
        leave_file = st.file_uploader("3. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Leave (.xlsx)", type=["xlsx"])

    if visit_files and (mode == "‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Visit" or (mode == "‡∏£‡∏ß‡∏° Visit + ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô" and master_file and leave_file)):
        if st.button("üîÅ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
            with st.spinner("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):

                visit_columns = [
                    "Id", "Number", "DATE", "UserName", "FirstName", "CustomerCOde", "Customer_Name",
                    "Customer_Location", "survey_updated_at", "‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô (‡πÄ‡∏ã‡∏•‡∏ü‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô)",
                    "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô", "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
                    "‡∏Å‡∏£‡∏ì‡∏µ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô (‡πÄ‡∏ã‡∏•‡∏ü‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô)"
                ]

                all_visit_data = pd.DataFrame()
                for upload in visit_files:
                    filename = upload.name
                    df = pd.read_csv(upload, skiprows=2, usecols=range(15), encoding='utf-8-sig')
                    df.columns = visit_columns
                    df["source_file"] = filename

                    match = re.search(r'wk(\d{1,2})', filename.lower())
                    week_num = int(match.group(1)) if match else None
                    df["week"] = week_num

                    all_visit_data = pd.concat([all_visit_data, df], ignore_index=True)

                visit_data = all_visit_data.rename(columns={"CustomerCOde": "Customer_COde"})

                if mode == "‡∏£‡∏ß‡∏° Visit + ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô":
                    master_bkk = pd.read_excel(master_file, sheet_name="BKK")
                    master_cnx = pd.read_excel(master_file, sheet_name="CNX")
                    master_df = pd.concat([master_bkk, master_cnx], ignore_index=True)

                    week_ref_preview = pd.read_excel(master_file, sheet_name="Week")
                    week_ref = week_ref_preview[1:].copy()
                    week_ref.columns = ["Year", "week", "Start_Date", "End_Date", "Monthnum", "Month", "Index"]
                    week_ref["Start_Date"] = pd.to_datetime(week_ref["Start_Date"])
                    week_ref["End_Date"] = pd.to_datetime(week_ref["End_Date"])
                    week_ref["week"] = week_ref["week"].astype(int)

                    leave_data = pd.read_excel(leave_file)
                    leave_data = leave_data.rename(columns={"user": "User"})

                    def map_week_from_date(date):
                        matched = week_ref[(week_ref["Start_Date"] <= date) & (week_ref["End_Date"] >= date)]
                        if not matched.empty:
                            return int(matched["week"].values[0])
                        return None

                    leave_data["Date"] = pd.to_datetime(leave_data["Date"], errors='coerce')
                    leave_data["mapped_week"] = leave_data["Date"].apply(map_week_from_date)

                    user_to_store = master_df[["USER DE", "StoreCode1"]].dropna()
                    user_to_store.columns = ["User", "Customer_COde"]
                    leave_data = leave_data.merge(user_to_store, on="User", how="left")

                    store_list = visit_data["Customer_COde"].dropna().unique()
                    week_list = sorted(visit_data["week"].dropna().unique())
                    base = pd.DataFrame(itertools.product(store_list, week_list), columns=["Customer_COde", "week"])

                    visit_flag = visit_data[["Customer_COde", "week", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤"]].drop_duplicates()
                    visit_flag = visit_flag.rename(columns={"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤": "has_visit"})
                    base = base.merge(visit_flag, on=["Customer_COde", "week"], how="left")

                    leave_flag = leave_data[["Customer_COde", "mapped_week", "‡∏Å‡∏≤‡∏£‡∏•‡∏≤"]].drop_duplicates()
                    leave_flag = leave_flag.rename(columns={"mapped_week": "week"})
                    base = base.merge(leave_flag, on=["Customer_COde", "week"], how="left")

                    base_sorted = base.sort_values(by=["Customer_COde", "week"])

                    def flag_cancel(row):
                        return "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£" if row["has_visit"] == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£" else None

                    base_sorted["cancel_flag"] = base_sorted.apply(flag_cancel, axis=1)

                    def carry_cancel(df):
                        df = df.sort_values(by="week")
                        df["cancel_carried"] = df["cancel_flag"].eq("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£").cummax().replace({False: None, True: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"})
                        return df

                    base_sorted = base_sorted.groupby("Customer_COde").apply(carry_cancel).reset_index(drop=True)

                    def determine_status(row):
                        if row["has_visit"] == "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î":
                            return "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î"
                        elif row["cancel_carried"] == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£":
                            return "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"
                        elif pd.notna(row["‡∏Å‡∏≤‡∏£‡∏•‡∏≤"]):
                            return row["‡∏Å‡∏≤‡∏£‡∏•‡∏≤"]
                        else:
                            return "‡∏Ç‡∏≤‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"

                    base_unique = base_sorted.drop_duplicates(subset=["Customer_COde", "week"])
                    base_unique["status"] = base_unique.apply(determine_status, axis=1)

                    pivot_df = base_unique.pivot(index="Customer_COde", columns="week", values="status")
                    pivot_df.columns = [f"WK{int(c)}" for c in pivot_df.columns]
                    pivot_df.reset_index(inplace=True)

                zip_buffer = io.BytesIO()
                with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED) as zip_file:
                    visit_bytes = io.BytesIO()
                    visit_data.to_csv(visit_bytes, index=False, encoding="utf-8-sig")
                    zip_file.writestr("visit_merged.csv", visit_bytes.getvalue())

                    if mode == "‡∏£‡∏ß‡∏° Visit + ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô":
                        pivot_bytes = io.BytesIO()
                        pivot_df.to_csv(pivot_bytes, index=False, encoding="utf-8-sig")
                        zip_file.writestr("status_summary.csv", pivot_bytes.getvalue())

                zip_buffer.seek(0)
                st.success("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (ZIP)", data=zip_buffer, file_name="visit_status_output.zip")

# ‡πÇ‡∏´‡∏°‡∏î: ‡∏£‡∏ß‡∏° Sell In
if mode == "‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå Sell In Total (Excel)":
    sellin_files = st.file_uploader("üì¶ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Sell In (.xlsx) ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå", type=["xlsx"], accept_multiple_files=True)

    if sellin_files and st.button("üîÅ ‡∏£‡∏ß‡∏° Sell In"):
        with st.spinner("üßæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
            all_sheets = pd.DataFrame()
            for f in sellin_files:
                df = pd.read_excel(f)
                all_sheets = pd.concat([all_sheets, df], ignore_index=True)

            buffer = io.BytesIO()
            all_sheets.to_excel(buffer, index=False)
            buffer.seek(0)

            st.success("‚úÖ ‡∏£‡∏ß‡∏° Sell In ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Sell In ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", data=buffer, file_name="sell_in_total.xlsx")
